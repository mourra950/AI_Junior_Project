# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from turtle import color
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QUrl
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox
from pyvis.network import Network
from PyQt5 import QtWebEngineWidgets
import networkx as nx
import Algorithms.BFS as bfs
import Algorithms.DFS as dfs
import Algorithms.astarsearch as Astar
import Algorithms.UniformCost as Ucs
# import Algorithms.AyaTest as Ucs
G = nx.DiGraph()
net=Network(height="540px",width="480px",directed=True)
counter = 0
def getPath(node):
    path=[]
    #cost=0
    path.append(node)
    while not(G.nodes[node]['parent'] is None):
        path.append(G.nodes[node]['parent'])
        #cost += nx.get_edge_attributes(g, 'weight')[(g.nodes[node]['parent'],node)]
        node=G.nodes[node]['parent']
    path.reverse()
    return path

def getH(node):
    return G.nodes[node]['h']
def greedy(g,start,goal):
    fringe=[]
    visited=[]
    if not(start in g.nodes):
        print("not in the graph")
        return
    else:
        fringe.append(start)
        x=fringe[0]
        while not(len(fringe)==0):
            x=fringe[0]
            visited.append(x)
            fringe.pop(0)
            if x in goal:
                print("Goal is "+ str(x),sep=" ")
                #print(getPath(x))
                return visited
            for y in nx.all_neighbors(g,x):
                if not(y in visited):
                    fringe.append(y)
                    nx.set_node_attributes(g, {y: x}, name="parent")

            fringe.sort(key=getH)

# test end

class Ui_MainWindow(object):
    #test
    #creating nodes
    # G.add_node('a',color='red',h=12)
    # G.add_node('b',h=8)
    # G.add_node('c',h=4)
    # G.add_node('d',h=6)
    # G.add_node('s',h=15)
    # G.add_node('g',h=0)
    # G.add_node('gs',h=3)
    #
    # # creating edges
    # G.add_edge('s', 'gs', weight=12)
    # G.add_edge('gs', 'g', weight=12)
    # G.add_edge('s', 'a', weight=1)
    # G.add_edge('a', 'b', weight=3)
    # G.add_edge('b', 'd', weight=3)
    # G.add_edge('a', 'c', weight=1)
    # G.add_edge('c', 'd', weight=1)

    def showPath(self,visited,counter):
        N = Network(height='100%', width='100%', directed=True)
        count=0
        for i in visited:
            if counter>count:
                N.add_node(i, color='#643A71')
                count += 1
            else:
                N.add_node(i)

        for i in nx.nodes(G):
            if i  not in visited :
                N.add_node(i)
        for i in nx.nodes(G):
            for j in nx.neighbors(G, i):
                N.add_edge(i, j,color='#Fcc201')
        N.write_html('g.html')
        self.web.load(QUrl.fromLocalFile(os.path.abspath(os.path.join(os.path.dirname(__file__), "g.html"))))

    def loadgraph(self):
        global counter
        if self.getAlgoSelection()=="Greedy":
            visited = greedy(G, 's', ['g'])
            print(visited)

            self.showPath(visited, counter)
            counter += 1
            visited.clear()
        elif self.getAlgoSelection()=="BFS":
            visited=bfs.bfs_iterate_till_goal(G,'s','g')
            print(visited)

            self.showPath(visited, counter)
            counter += 1
            visited.clear()
        elif self.getAlgoSelection()=="Uniform Cost":
            visited = Ucs.ucs_visited(G,'s','g')
            print(visited)

            self.showPath(visited, counter)
            counter += 1
            visited.clear()
        elif self.getAlgoSelection()=="A*":
            visited = Astar.A_visited_nodes(G,'s','g')
            print(visited)

            self.showPath(visited, counter)
            counter += 1
            visited.clear()
        elif self.getAlgoSelection()=="Iterative Deepening":
            
            visited.clear()
        elif self.getAlgoSelection()=="DFS":
            visited=dfs.dfs_iterate_till_goal(G,'s','g')
            print(visited)

            self.showPath(visited, counter)
            counter += 1
            visited.clear()
        #net.from_nx(G)
        #net.write_html("g.html")
        #self.web.load(QUrl.fromLocalFile(os.path.abspath(os.path.join(os.path.dirname(__file__), "g.html"))))
    def drawGraph(self):
        
        self.loadgraph()
    def getNodeName(self):
        return self.InsertedNode.text()
    def getFromNode(self):
        return self.FromNode.text()
    def getToNode(self):
        return self.ToNode.text()
    def insertNode(self):
        if self.getNodeName()=="":
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Node name can't be null")
            msg.setWindowTitle("Error")
            msg.exec_()
        elif self.getNodeName() in nx.nodes(G):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Node exists")
            msg.setWindowTitle("Error")
            msg.exec_()
        else:
            G.add_node(self.getNodeName())
            self.draw()
            self.InsertedNode.clear()
    def insertEdge(self):
        if self.getFromNode()=="" or self.getFromNode() not in nx.nodes(G) or self.getToNode()=="" or self.getToNode() not in nx.nodes(G):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Enter valid node")
            msg.setWindowTitle("Error")
            msg.exec_()
        else:
            G.add_edge(self.getFromNode(),self.getToNode())
            self.draw()
        self.ToNode.clear()
        self.FromNode.clear()
    def deleteNode(self):
        if self.getNodeName() not in nx.nodes(G):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Enter valid node")
            msg.setWindowTitle("Error")
            msg.exec_()
        else:
            G.remove_node(self.getNodeName())
            self.draw()
        self.InsertedNode.clear()
    def draw(self):
        N = Network(height='100%', width='100%', directed=True)
        for i in nx.nodes(G):
            N.add_node(i)
        for i in nx.nodes(G):
            for j in nx.neighbors(G, i):
                N.add_edge(i, j, color='#Fcc201')
        N.write_html('Graph.html')
        self.web.load(QUrl.fromLocalFile(os.path.abspath(os.path.join(os.path.dirname(__file__), "Graph.html"))))
    def getAlgoSelection(self):
        return self.comboBox.currentText()

    def deleteEdge(self):
        if self.getFromNode() == "" or self.getFromNode() not in nx.nodes(
                G) or self.getToNode() == "" or self.getToNode() not in nx.nodes(G):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Enter valid node")
            msg.setWindowTitle("Error")
            msg.exec_()
        elif not G.has_edge(self.getFromNode(),self.getToNode()):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Not valid edge")
            msg.setWindowTitle("Error")
            msg.exec_()
        else:
            G.remove_edge(self.getFromNode(),self.getToNode())
            self.draw()
        self.ToNode.clear()
        self.FromNode.clear()



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1120, 623)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setMaximumSize(QtCore.QSize(600, 1200))
        self.widget.setStyleSheet("QGroupBox {border:0;}")
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(0, 7, -1, 6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox_4 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_4.setStyleSheet("border-color: rgba(255, 255, 255, 0);")
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.InsertNode = QtWidgets.QPushButton(self.groupBox_4)
        self.InsertNode.clicked.connect(lambda :self.insertNode())
        self.InsertNode.setObjectName("InsertNode")
        self.verticalLayout_4.addWidget(self.InsertNode)
        self.DeleteNode = QtWidgets.QPushButton(self.groupBox_4)
        self.DeleteNode.setObjectName("DeleteNode")
        self.DeleteNode.clicked.connect(lambda: self.deleteNode())
        self.verticalLayout_4.addWidget(self.DeleteNode)
        self.verticalLayout.addWidget(self.groupBox_4)
        self.groupBox_5 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBox_5)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.InsertEdge = QtWidgets.QPushButton(self.groupBox_5)
        self.InsertEdge.setObjectName("InsertEdge")
        self.verticalLayout_5.addWidget(self.InsertEdge)
        self.InsertEdge.clicked.connect(lambda: self.insertEdge())
        self.DeleteEdge = QtWidgets.QPushButton(self.groupBox_5)
        self.DeleteEdge.setObjectName("DeleteEdge")
        self.DeleteEdge.clicked.connect(lambda : self.deleteEdge())
        self.verticalLayout_5.addWidget(self.DeleteEdge)
        self.verticalLayout.addWidget(self.groupBox_5)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setStyleSheet("\n"
"border:0;")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_8.setContentsMargins(-1, 0, 9, 0)
        self.verticalLayout_8.setSpacing(6)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.InsertedNode = QtWidgets.QLineEdit(self.groupBox_2)
        self.InsertedNode.setObjectName("InsertedNode")
        self.verticalLayout_8.addWidget(self.InsertedNode)
        self.IsGoalState = QtWidgets.QRadioButton(self.groupBox_2)
        self.IsGoalState.setObjectName("IsGoalState")
        self.verticalLayout_8.addWidget(self.IsGoalState)
        self.verticalLayout_2.addWidget(self.groupBox_2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_3.setContentsMargins(-1, 63, -1, 73)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.FromNode = QtWidgets.QLineEdit(self.groupBox_3)
        self.FromNode.setObjectName("FromNode")
        self.verticalLayout_3.addWidget(self.FromNode)
        self.ToNode = QtWidgets.QLineEdit(self.groupBox_3)
        self.ToNode.setObjectName("ToNode")
        self.verticalLayout_3.addWidget(self.ToNode)
        self.verticalLayout_2.addWidget(self.groupBox_3)
        self.horizontalLayout_2.addWidget(self.groupBox)
        self.groupBox_6 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_6.setMinimumSize(QtCore.QSize(210, 0))
        self.groupBox_6.setTitle("")
        self.groupBox_6.setFlat(True)
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label = QtWidgets.QLabel(self.groupBox_6)
        self.label.setMaximumSize(QtCore.QSize(16777215, 50))
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setObjectName("label")
        self.verticalLayout_6.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.groupBox_6)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_6.addWidget(self.comboBox)
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_6)
        self.groupBox_7.setMaximumSize(QtCore.QSize(16777215, 150))
        self.groupBox_7.setTitle("")
        self.groupBox_7.setObjectName("groupBox_7")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_7)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_2 = QtWidgets.QLabel(self.groupBox_7)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 50))
        self.label_2.setObjectName("label_2")
        self.verticalLayout_7.addWidget(self.label_2)
        self.StartNode = QtWidgets.QLineEdit(self.groupBox_7)
        self.StartNode.setText("")
        self.StartNode.setObjectName("StartNode")
        self.verticalLayout_7.addWidget(self.StartNode)
        self.verticalLayout_6.addWidget(self.groupBox_7)
        self.StartAlgo = QtWidgets.QPushButton(self.groupBox_6)
        self.StartAlgo.setObjectName("StartAlgo")
        self.verticalLayout_6.addWidget(self.StartAlgo)
        self.Reset = QtWidgets.QPushButton(self.groupBox_6)
        self.Reset.setObjectName("Reset")
        self.verticalLayout_6.addWidget(self.Reset)
        self.horizontalLayout_2.addWidget(self.groupBox_6)
        self.horizontalLayout.addWidget(self.widget)
        self.web = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.web.setMinimumSize(QtCore.QSize(250, 0))
        self.web.setStyleSheet("border-color: rgb(0, 255, 0);\n"
"border: 4px;\n"
"background-color: rgb(170, 255, 0);")
        self.web.setObjectName("web")
        self.horizontalLayout.addWidget(self.web)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1120, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.InsertNode.setText(_translate("MainWindow", "Insert Node"))
        self.DeleteNode.setText(_translate("MainWindow", "Delete Node"))
        self.InsertEdge.setText(_translate("MainWindow", "Insert Edge"))
        self.DeleteEdge.setText(_translate("MainWindow", "Delete Edge"))
        self.IsGoalState.setText(_translate("MainWindow", "Goal State"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt;\">Select Algorithm</span></p></body></html>"))
        self.comboBox.setItemText(0, _translate("MainWindow", "BFS"))
        self.comboBox.setItemText(1, _translate("MainWindow", "DFS"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Uniformed Cost"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Iterative Deepening"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Greedy"))
        self.label_2.setText(_translate("MainWindow", "Start Node"))
        self.StartAlgo.setText(_translate("MainWindow", "Start"))
        self.StartAlgo.clicked.connect(lambda:self.drawGraph())
        self.Reset.setText(_translate("MainWindow", "reset"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
